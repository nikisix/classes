  ____ _ _   
 / ___(_) |_ 
| |  _| | __|
| |_| | | |_ 
 \____|_|\__|
By Nick Tomasino

[[ Git Class ]]
Another Cheat Sheet
http://www.git-tower.com/blog/git-cheat-sheet/

Git Docs
https://git-scm.com/docs


GitHub's Cheat Sheet
https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf
GitHub
GIT CHEAT SHEET

[[ INSTALL GIT ]]
GitHub provides desktop clients that include a graphical user
interface for the most common repository actions and an automatically
updating command line edition of Git for advanced scenarios.
GitHub for Windows
htps://windows.github.com
GitHub for Mac
htps://mac.github.com
Git distributions for Linux and POSIX systems are available on the
official Git SCM web site.
Git for All Platforms
htp://git-scm.com

[[ MAKE CHANGES ]]
Review edits and craft a commit transaction
$ git status
Lists all new or modified files to be commited
$ git add [file]
Snapshots the file in preparation for versioning
$ git reset [file]
Unstages the file, but preserve its contents
$ git diff
Shows file differences not yet staged
$ git diff --staged
Shows file differences between staging and the last file version
$ git commit -m "[descriptive message]"
Records file snapshots permanently in version history

[[ CONFIGURE TOOLING ]]
Configure user information for all local repositories
$ git config --global user.name "[name]"
Sets the name you want atached to your commit transactions
$ git config --global user.email "[email address]"
Sets the email you want atached to your commit transactions
$ git config --global color.ui auto
Enables helpful colorization of command line output

[[ CREATE REPOSITORIES ]]
Start a new repository or obtain one from an existing URL
$ git init [project-name]
Creates a new local repository with the specified name
$ git clone [url]
Downloads a project and its entire version history

[[ GROUP CHANGES ]]
Name a series of commits and combine completed efforts
$ git branch
Lists all local branches in the current repository
$ git branch [branch-name]
Creates a new branch
$ git checkout [branch-name]
Switches to the specified branch and updates the working directory
$ git merge [branch]
Combines the specified branch’s history into the current branch
$ git branch -d [branch-name]
Deletes the specified branch
Git is the open source distributed version control system that facilitates GitHub activities on your laptop or
desktop. This cheat sheet summarizes commonly used Git command line instructions for quick reference.

[[ SYNCHRONIZE CHANGES ]]
Register a repository bookmark and exchange version history
$ git fetch [bookmark]
Downloads all history from the repository bookmark
$ git merge [bookmark]/[branch]
Combines bookmark’s branch into current local branch
$ git push [alias] [branch]
Uploads all local branch commits to GitHub
$ git pull
Downloads bookmark history and incorporates changes

[[ REFACTOR FILENAMES ]]
Relocate and remove versioned files
$ git rm [file]
Deletes the file from the working directory and stages the deletion
$ git rm --cached [file]
Removes the file from version control but preserves the file locally
$ git mv [file-original] [file-renamed]
Changes the file name and prepares it for commit

[[ SAVE FRAGMENTS ]]
Shelve and restore incomplete changes
$ git stash
Temporarily stores all modified tracked files
$ git stash list
Lists all stashed changesets
$ git stash pop
Restores the most recently stashed files
$ git stash drop
Discards the most recently stashed changeset

[[ REDO COMMITS ]]
Erase mistakes and craft replacement history
$ git reset [commit]
Undoes all commits afer [commit], preserving changes locally
$ git reset --hard [commit]
Discards all history and changes back to the specified commit

[[ REVIEW HISTORY ]]
Browse and inspect the evolution of project files
$ git log
Lists version history for the current branch
$ git log --follow [file]
Lists version history for a file, including renames
$ git diff [first-branch]...[second-branch]
Shows content differences between two branches
$ git show [commit]
Outputs metadata and content changes of the specified commit


[[ Exercise Part 1 ]]
Generate a public ssh key and publish it to GitHub/Unfuddle/Interns
Initialize a repo
Add files to the repo
Commit the files
Make some changes to the files
Diff all added files
Diff one file
Dry add changes - to see what will be added without actually adding
Dry add changes all files in current and subdirectories
Add changes
Commit the changes

[[ Exercise 2 - Branching ]]
Run example1
Create a dev branch off of the master branch
Change some files in the new branch
add changes
commit changes
check dev status
review history of dev
checkout master
check master history
cat master files - notice prior version
merge dev into master
cat master files - notice current version
delete dev

[[ Exercise 3 - Stashing ]]
Run example1
Create a dev branch off of the master branch
Change some files in the new branch
add changes
commit changes
check dev status
stash changes
check dev status
checkout master
cat master files - notice prior version
check status
check master history
checkout dev
pop stash
review history of dev
checkout master
merge dev into master
delete dev

[[ Exercise 4 - Conflicts ]]
Run example 2
Create a conflict between the branches by changing the same file on each branch
Merge and resolve the conflict using a diff tool

[[ MISC ]]
git rm -r —cached dir_name
had a directory actually needed to remove from my branch but had already commited changes but was able to remove it by running that and then it was actually ignored. thought id share
yeah… i had pushed a branch with client data that i was testing then added it to… whoops lol
