 ____                      
|  _ \ ___  __ _  _____  __
| |_) / _ \/ _` |/ _ \ \/ /
|  _ <  __/ (_| |  __/>  < 
|_| \_\___|\__, |\___/_/\_\
           |___/           
By Nick Tomasino

    [[ ONINE_REGEX_TESTER ]]
https://regex101.com/

    [[ REFERENCES ]]
the-absolute-bare-minimum-every-programmer-should-know-about-regular-expressions/
http://web.archive.org/web/20090209182018/http://immike.net/blog/2007/04/06/the-absolute-bare-minimum-every-programmer-should-know-about-regular-expressions/

5-regular-expressions-every-web-programmer-should-know
http://web.archive.org/web/20090318193321/http://immike.net/blog/2007/04/06/5-regular-expressions-every-web-programmer-should-know/

extreme-regex-foo-what-you-need-to-know-to-become-a-regular-expression-pro
http://web.archive.org/web/20091217102803/http://immike.net/blog/2007/06/21/extreme-regex-foo-what-you-need-to-know-to-become-a-regular-expression-pro/

https://automatetheboringstuff.com/chapter7/
practice problems
phoneRegex = re.compile(r'''(
    (\d{3}|\(\d{3}\))?                # area code
    (\s|-|\.)?                        # separator
    (\d{3})                           # first 3 digits
    (\s|-|\.)                         # separator
    (\d{4})                           # last 4 digits
    (\s*(ext|x|ext.)\s*(\d{2,5}))?    # extension
    )''', re.VERBOSE)


    [[ 8_COMMON_PATTERNS ]]
http://code.tutsplus.com/tutorials/8-regular-expressions-you-should-know--net-6149
matching a..
1. username:    /^[a-z0-9_-]{3,16}$/
2. password:    /^[a-z0-9_-]{6,18}$/
3. hex value:   /^#?([a-f0-9]{6}|[a-f0-9]{3})$/
4. slug:        /^[a-z0-9-]+$/
5. email:       /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/ 
6. url:         /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/
7. ip_address:  /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
8. html tag:    /^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/

Notes:
In practice, you may want to allow more characters in the password regex.


    [[ GEO_REGEX ]]
from the python-streetaddress package
street_type = re.compile('|'.join(Streets.STREET_TYPES_LIST), re.IGNORECASE)
number = re.compile(r'\d+-?\w*')
box = re.compile(r'(?:box[^a-z]|(p[-. ]?o.?[- ]?|post office )b(.|ox)\W*?\s+(?:\#\W*)?(\d+-?\d*)\W*?\s?(?:([\w\s]+)\s+Sta(?:tion)?)?)', re.IGNORECASE)
fraction = re.compile(r'\d+\/\d+')
state = re.compile('|'.join([v.replace(' ','\\s') for v in (States.STATE_CODES.values() + States.STATE_CODES.keys())]), re.IGNORECASE)
direct = re.compile('|'.join(Directions.DIRECTIONAL.keys()) + '|' + '|'.join([(''.join([n+'\\.' for n in v])+'|'+v) for v in sorted(Directions.DIRECTIONAL.values(), key=len, reverse=True)]), re.IGNORECASE)
zip_code = re.compile(r'(\d{5})(?:-(\d{4}))?')
corner = re.compile(r'(?:\band\b|\bat\b|&|\@)', re.IGNORECASE)
unit_type = re.compile('(?:[\w-]+ )?(?:su?i?te|p\W*[om]\W*b(?:ox)?|dept|apt|apartment|ro*m|fl|floor|unit|box)')
unit_number = re.compile('(?:[\w-]+|{})'.format(fraction.pattern))
unit = re.compile(r'(?:(?:(?:({0})[\s:]+|\#\W*)({1}))|(?:({1})\s+({0}))|({2}))'.format(unit_type.pattern,unit_number.pattern,fraction.pattern), re.IGNORECASE)
street = re.compile(r'(?:(?:({0})\W+({1})\b)|(?:({0})\W+)?(?:([^,]+)(?:[^\w,]+({1})\b)(?:[^\w,]+({0})\b)?|([^,]*\d)({0})\b|([^,]+?)(?:[^\w,]+({1})\b)?(?:[^\w,]+({0})\b)?))'.format(direct.pattern,street_type.pattern), re.IGNORECASE)
place = re.compile(r'(?:([^\d,]+?)\W+(${0})\W*)?(?:{1})?'.format(state.pattern,zip_code.pattern), re.IGNORECASE)
address = re.compile(r'\A\W*({0})\W*(?:({1})\W*)?{2}\W+(?:{3}\W+)?{4}\W*\Z'.format(number.pattern,fraction.pattern,street.pattern,unit.pattern,place.pattern), re.IGNORECASE)
intersection = re.compile('\A\W*{0}\W*?\s+{1}\s+{0}\W+{2}\W*\Z'.format(street.pattern,corner.pattern,place.pattern), re.IGNORECASE)
box_address = re.compile('\A\W*{0}\W+(?:{1}\W+)?{2}\W*\Z'.format(box.pattern,unit.pattern,place.pattern), re.IGNORECASE)


    [[ LookAhead_LookBehind ]]
?<  is look behind
! is negation
?=   lookahead
?!  negative lookahead
?<=  or ?<! for lookbehind

example
    .*(?<!\.zip)$
    all files that aren't a zip


    [[ Remove duplicates from two files based on columns ]]
will print out rows that dont match the columns remove the ! and parens at the end to get rows that are duplicates
awk -F',' 'NR==FNR{c[$1,$3]++;next};!(c[$1,$3]) > 0'`
